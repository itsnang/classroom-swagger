openapi: 3.0.3
info:
  title: Classroom Management System API
  description: |
    API for managing classroom operations including courses, classes,
    students, trainers, sessions, and attendance tracking.
  version: 1.0.0
  contact:
    name: API Support
    email: support@classroom-management.com

servers:
  - url: https://api.classroom-management.com
    description: Production server
  - url: https://staging-api.classroom-management.com
    description: Staging server
  - url: http://localhost:3000
    description: Development server

security:
  - bearerAuth: []
  - apiKeyAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: string($string)

  schemas:
    StandardResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Success
        data:
          description: Payload for successful responses
          nullable: true
          oneOf:
            - type: object
            - type: array
            - type: string
            - type: number
            - type: boolean

    ErrorResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: Validation error
        error:
          $ref: '#/components/schemas/Error'
    User:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [student, trainer, admin]
          example: "student"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Course:
      type: object
      properties:
        course_id:
          type: integer
          example: 1
        course_name:
          type: string
          example: "Advanced JavaScript Programming"
        description:
          type: string
          example: "A comprehensive course covering advanced JavaScript concepts"
        total_sessions:
          type: integer
          example: 12
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Class:
      type: object
      properties:
        class_id:
          type: integer
          example: 1
        course_id:
          type: integer
          example: 1
        trainer_id:
          type: integer
          example: 2
        class_name:
          type: string
          example: "JS Advanced - Fall 2024"
        start_date:
          type: string
          format: date
          example: "2024-01-15"
        end_date:
          type: string
          format: date
          example: "2024-04-15"
        max_students:
          type: integer
          example: 25
        schedule_details:
          type: string
          example: "Monday, Wednesday, Friday 9:00 AM - 11:00 AM"
        status:
          type: string
          enum: [scheduled, active, completed, cancelled]
          example: "active"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        session_id:
          type: integer
          example: 1
        class_id:
          type: integer
          example: 1
        session_number:
          type: integer
          example: 1
        topic:
          type: string
          example: "Introduction to Advanced Concepts"
        session_datetime:
          type: string
          format: date-time
          example: "2024-01-15T09:00:00Z"
        duration_minutes:
          type: integer
          example: 120
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Enrollment:
      type: object
      properties:
        enrollment_id:
          type: integer
          example: 1
        student_id:
          type: integer
          example: 1
        class_id:
          type: integer
          example: 1
        enrollment_date:
          type: string
          format: date-time
          example: "2024-01-10T10:00:00Z"
        is_active:
          type: boolean
          example: true

    Attendance:
      type: object
      properties:
        attendance_id:
          type: integer
          example: 1
        session_id:
          type: integer
          example: 1
        student_id:
          type: integer
          example: 1
        status:
          type: string
          enum: [present, absent, late, excused]
          example: "present"
        check_in_time:
          type: string
          format: date-time
          example: "2024-01-15T09:05:00Z"
        notes:
          type: string
          example: "Student arrived 5 minutes late"
        recorded_at:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "password123"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
        expires_in:
          type: integer
          example: 3600

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "The provided data is invalid"

paths:
  /v1/health:
    get:
      tags:
        - Meta
      summary: Health check
      description: Simple health endpoint to verify API is reachable
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          service:
                            type: string
                            example: classroom-management
                          version:
                            type: string
                            example: v1
  # Authentication Endpoints
  /v1/classroom-management/auth/signup:
    post:
      tags:
        - Authentication
      summary: User Signup
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - email
                - password
                - role
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
                role:
                  type: string
                  enum: [student, trainer]
                  example: "student"
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      status:
                        example: 201
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/classroom-management/auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/classroom-management/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh Token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          expires_in:
                            type: integer
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



  /v1/classroom-management/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate current user session
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true

  /v1/classroom-management/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get information about the currently authenticated user
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Course Management
  /v1/classroom-management/courses:
    get:
      tags:
        - Courses
      summary: Get all courses
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/Course'
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer

    post:
      tags:
        - Courses
      summary: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - course_name
                - total_sessions
              properties:
                course_name:
                  type: string
                description:
                  type: string
                total_sessions:
                  type: integer
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  /v1/classroom-management/courses/{course_id}:
    get:
      tags:
        - Courses
      summary: Get course by ID
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Course'
        '404':
          description: Course not found

    put:
      tags:
        - Courses
      summary: Update course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_name:
                  type: string
                description:
                  type: string
                total_sessions:
                  type: integer
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

    delete:
      tags:
        - Courses
      summary: Delete course
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Course deleted successfully

  # Class Management
  /v1/classroom-management/classes:
    get:
      tags:
        - Classes
      summary: Get all classes
      parameters:
        - name: course_id
          in: query
          schema:
            type: integer
        - name: trainer_id
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [scheduled, active, completed, cancelled]
      responses:
        '200':
          description: List of classes
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Class'

    post:
      tags:
        - Classes
      summary: Create a new class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - course_id
                - trainer_id
                - class_name
                - start_date
                - end_date
              properties:
                course_id:
                  type: integer
                trainer_id:
                  type: integer
                class_name:
                  type: string
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                max_students:
                  type: integer
                schedule_details:
                  type: string
      responses:
        '201':
          description: Class created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'

  /v1/classroom-management/classes/{class_id}:
    get:
      tags:
        - Classes
      summary: Get class by ID
      parameters:
        - name: class_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Class details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Class'

    put:
      tags:
        - Classes
      summary: Update class
      parameters:
        - name: class_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                trainer_id:
                  type: integer
                class_name:
                  type: string
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                max_students:
                  type: integer
                schedule_details:
                  type: string
                status:
                  type: string
                  enum: [scheduled, active, completed, cancelled]
      responses:
        '200':
          description: Class updated successfully

    delete:
      tags:
        - Classes
      summary: Delete class
      parameters:
        - name: class_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Class deleted successfully

  # Session Management
  /v1/classroom-management/classes/{class_id}/sessions:
    get:
      tags:
        - Sessions
      summary: Get sessions for a class
      parameters:
        - name: class_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Session'

    post:
      tags:
        - Sessions
      summary: Create session for class
      parameters:
        - name: class_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_number
                - topic
                - session_datetime
              properties:
                session_number:
                  type: integer
                topic:
                  type: string
                session_datetime:
                  type: string
                  format: date-time
                duration_minutes:
                  type: integer
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

  /v1/classroom-management/sessions/{session_id}:
    get:
      tags:
        - Sessions
      summary: Get session by ID
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Session'

    put:
      tags:
        - Sessions
      summary: Update session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_number:
                  type: integer
                topic:
                  type: string
                session_datetime:
                  type: string
                  format: date-time
                duration_minutes:
                  type: integer
      responses:
        '200':
          description: Session updated successfully

    delete:
      tags:
        - Sessions
      summary: Delete session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Session deleted successfully

  # Student Management
  /v1/classroom-management/students:
    get:
      tags:
        - Students
      summary: Get all students
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'

    post:
      tags:
        - Students
      summary: Create student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - email
                - password
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /v1/classroom-management/students/{student_id}:
    get:
      tags:
        - Students
      summary: Get student by ID
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Student details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

    put:
      tags:
        - Students
      summary: Update student
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Student updated successfully

    delete:
      tags:
        - Students
      summary: Delete student
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Student deleted successfully

  # Enrollment Management
  /v1/classroom-management/enrollments:
    post:
      tags:
        - Enrollments
      summary: Enroll student in class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - student_id
                - class_id
              properties:
                student_id:
                  type: integer
                class_id:
                  type: integer
      responses:
        '201':
          description: Student enrolled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'

  /v1/classroom-management/enrollments/{enrollment_id}:
    delete:
      tags:
        - Enrollments
      summary: Remove enrollment
      parameters:
        - name: enrollment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Enrollment removed successfully

  /v1/classroom-management/students/{student_id}/enrollments:
    get:
      tags:
        - Enrollments
      summary: Get student's enrollments
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Student's enrollments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Enrollment'

  /v1/classroom-management/classes/{class_id}/enrollments:
    get:
      tags:
        - Enrollments
      summary: Get class enrollments
      parameters:
        - name: class_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Class enrollments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Enrollment'

  # Attendance Management
  /v1/classroom-management/sessions/{session_id}/attendance:
    get:
      tags:
        - Attendance
      summary: Get attendance for session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Session attendance records
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Attendance'

    post:
      tags:
        - Attendance
      summary: Mark student attendance
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - student_id
                - status
              properties:
                student_id:
                  type: integer
                status:
                  type: string
                  enum: [present, absent, late, excused]
                check_in_time:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '201':
          description: Attendance marked successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      status:
                        example: 201
                      data:
                        $ref: '#/components/schemas/Attendance'

  /v1/classroom-management/attendance/{attendance_id}:
    put:
      tags:
        - Attendance
      summary: Update attendance record
      parameters:
        - name: attendance_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [present, absent, late, excused]
                check_in_time:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '200':
          description: Attendance updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Attendance'

    delete:
      tags:
        - Attendance
      summary: Delete attendance record
      parameters:
        - name: attendance_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Attendance record deleted successfully
